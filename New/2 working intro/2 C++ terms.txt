
# How C++ Works

- source code files
-preprocessing - modify above file to preprocessor directives(such as #incldue etc) 
- Compilation assembly - machine languages code
- linking - links the object code with the libraries and produce a single executable file.
- Executable program 



#############################################

## Basic terms 



● Keywords - char , double, while , namespace
● Identifiers - it is use to name object,reference,functions,enumerators,types, class Member 
● Data types - 
● Variables
● Constants
● Operators
● Expressions
● Statements
● Reference variables
● Inline functions
● Function overloading



################################

Compound Type: 


1. Array - same type info store in a array 

###########
2. Reference - A reference variable provides an alias for a previously defined variable.
example : int &b = a ; // not a pointer ,pointer use *

why pass by reference? 
-It eliminates the copying of object parameters back and forth.

#############

Pointer 

- variable that store address
-  example :  int *ptr =&a;

another: int a = 5;
int* ptr = &a; // ptr points to a
*ptr = 10; // a's value will now be 10

int b = *ptr; // A new variable b will be created.
// a's value will be copied to b


- addition and subtraction can be done
 example : ++mylong bhayo bhane memory address tyaka agadi ko naya ma jancha, I mean tyo ni add huncha


- new for dynamic memory allocation and delete for free memory
- 

Function Pointer
#################

- function can be treated as data that can be be assigned to a variable or parameter
- example:
            int (*F)(int);
            F=func1
            std::cout<<F(100)<< std::end1





- Function type depends on parameter and return types.
- Example:
```cpp
int (*F)(int);
F = func1;
F = func2;
```


Enumeration
############

- Enumerated types have custom identifiers.
- Values implicitly convertible to integers.
- Example:
```cpp
enum colors_t {black, blue, green, ...};
colors_t mycolor;
mycolor = blue;
```


Variables: Declaration
#########################

- C++ requires variable declaration with type.
- Example:
```cpp
int x, y;
```


Variables: Initialization
###########################

- Three ways to initialize variables.

- Example:
```cpp
int x = 1; //Copy initialize an integers
int y(1);    // Direct initialize an integer
int z{1};  //Uniform initialization of an integer

```


Constants: Literals
###################

- Express specific values in code.
- Examples: Integer, Floating-Point, Character, Boolean, nullptr.
```cpp
int a = 5;
float b = 3.14f;
char c = 'A';
bool d = true;
```


Constants: Typed Constant Expressions
########################################

- Constants that cannot be modified.
- Example: `const int a = 5;`
#define MAX 10 // Defines a constant MAX whose value is 10


Operators: Assignment and Arithmetic
#####################################

- Assignment (`=`), Addition (`+`), Subtraction (`-`), Multiplication (`*`), Division (`/`), Modulo (`%`).
- Examples:
```cpp
x = 1;
x = x + 2;
```

Operators: Relational and Logical
#################################

- Relational (`==`, `!=`, `<`, `>`, `<=`, `>=`) and Logical (`&&`, `||`, `!`).
- Examples:
```cpp
if (x == y)
if (x && y)
```

Operators: Conditional and Bitwise
#####################################
- Conditional (`? :`) and Bitwise (`&`, `|`, `^`, `~`, `<<`, `>>`).
- Examples:
```cpp
int a = (x > y) ? x : y;
int b = x & y;
```


Operators: Others
#################

- Special (`sizeof`, `typeid`, `new`, `delete`) and Member Access (`a.b`, `a->b`, `a.*b`, `a->*b`).
- Example:
```cpp
int size = sizeof(int);
```

Operator Precedence
####################


-A single expression may contain multiple operators.
Example expressions: y = 2 + 10 / 5; and z = 7 + 4 ^ 3;

Values:

    y: The value of y is 4 because division has higher precedence than addition.
    z: The value of z is 11 because the XOR operator (^) has lower precedence than addition.

Expressions
##############

Definition:

    An expression is a sequence of operators and operands that specifies a computation.
    Operators can be unary, binary, or ternary.

Examples:

    a + b
    ++a
    (a > b) ? a : b

Statements
#############

Definition:

    A simple C++ statement is an individual instruction, ending with a semicolon.
    Executed in the order they appear.

Example:

cpp

int x = 5, y = 6;
int z = x + y;


Flow Control Statements
#########################

Categories:

    ----Selection Statements:
        if-else, switch

    ----Iteration Statements:
        while loop, for loop, Range-based for loop (since C++11)

    ----Jump Statements:
        goto, break, continue


Default Arguments
###################

Definition:

    Default values for function parameters.
    Used when a function call doesn't specify an argument for that parameter.

Example:

cpp

int multiply(int a, int b = 1) {
    return a * b;
}

Inline Functions
################

Definition:

    Used for short functions to reduce the overhead of a regular function call.
    Specified by the inline keyword.

Example:

cpp

inline int square(int a) {
    return a * a;
}

Scope and Namespace
###################


Scopes:

    Global Scope: Variable valid from declaration to program end.
    Block Scope: Variable limited to the block where declared.

Namespaces:

    Used for organizing code and preventing name collisions.


Example:
   # THIS ON IS IMPORTANT. // Accessing namespace members using ::
----- int main() {
    // Accessing namespace members using ::
    std::cout << MyNamespace::myVariable << std::endl;
    MyNamespace::myFunction();
    return 0;
}


----- using namespace MyNamespace;

    std::cout << myVariable << std::endl;
    myFunction();
    return 0;

Static Variables
#################

Definition:

    Variables that retain values and are not destroyed after going out of scope.
    Example: static int s_id{ 0 };

Function Overloading
#####################

Definition:

    Multiple functions with the same name but different parameter lists.
    Return type alone can't distinguish overloads.

Example:

cpp

int add(int a, int b) { return a + b; }
int add(int a, int b, int c) { return a + b + c; }

Flashcard 11: Strings in C++

Usage:

    C++ has a string class for string manipulation.
    Example: std::string str1 = "Hello";

Flashcard 12: The Stack and the Heap

Overview:

    The stack and heap are memory storage areas.
    Stack: Local variables, function calls.
    Heap: Dynamic memory allocation.

Flashcard 13: Comparison Between C and C++

C vs C++:

    C: Procedure-oriented, lightweight, no data encapsulation.
    C++: Object-oriented, lightweight, supports data encapsulation.